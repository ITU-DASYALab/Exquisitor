//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace AS.HDFql {

		using System;
		using System.Runtime.InteropServices;
	
public class HDFql {

		private static Variable []variableList = new Variable[]{null, null, null, null, null, null, null, null};

		private HDFql()   // INFO: set constructor visibility to private to disable instantiation of the class
		{
		}

		private class Variable
		{
			public object variable;
			public GCHandle handle;
			public IntPtr address;

			public Variable(object variable)
			{
				this.variable = variable;
				this.handle = GCHandle.Alloc(this.variable, GCHandleType.Pinned);
				this.address = this.handle.AddrOfPinnedObject();
			}
		}

		public static int Execute(string script)
		{
			int status;
			int i;

			if (script == null)
			{
				return ExecuteReset();
			}

			status = Execute(script, script.Length, CSharp);
			if ((status & 0x100) != 0)   // INFO: check if a transient variable was used
			{
				for(i = 0; i < 8; i++)
				{
					if ((status & (1 << (i + 9))) != 0)
					{
						variableList[i].handle.Free();
						variableList[i] = null;
					}
				}
				status &= 0x000000FF;
			}
			if (status > 127)
			{
				return status - 256;
			}
			else
			{
				return status;
			}
		}

		public static int CursorInitialize()
		{
			return CursorInitialize(null);
		}

		public static int CursorClear()
		{
			return CursorClear(null);
		}

		public static int CursorClone(HDFqlCursor cursorClone)
		{
			return CursorClone(null, cursorClone);
		}

		public static int CursorGetDataType()
		{
			return CursorGetDataType(null);
		}

		public static int CursorGetCount()
		{
			return CursorGetCount(null);
		}

		public static int SubcursorGetCount()
		{
			return SubcursorGetCount(null);
		}

		public static int CursorGetPosition()
		{
			return CursorGetPosition(null);
		}

		public static int SubcursorGetPosition()
		{
			return SubcursorGetPosition(null);
		}

		public static int CursorFirst()
		{
			return CursorFirst(null);
		}

		public static int SubcursorFirst()
		{
			return SubcursorFirst(null);
		}

		public static int CursorLast()
		{
			return CursorLast(null);
		}

		public static int SubcursorLast()
		{
			return SubcursorLast(null);
		}

		public static int CursorNext()
		{
			return CursorNext(null);
		}

		public static int SubcursorNext()
		{
			return SubcursorNext(null);
		}

		public static int CursorPrevious()
		{
			return CursorPrevious(null);
		}

		public static int SubcursorPrevious()
		{
			return SubcursorPrevious(null);
		}

		public static int CursorAbsolute(int position)
		{
			return CursorAbsolute(null, position);
		}

		public static int SubcursorAbsolute(int position)
		{
			return SubcursorAbsolute(null, position);
		}

		public static int CursorRelative(int position)
		{
			return CursorRelative(null, position);
		}

		public static int SubcursorRelative(int position)
		{
			return SubcursorRelative(null, position);
		}

		public static int CursorGetSize()
		{
			return CursorGetSize(null);
		}

		public static int SubcursorGetSize()
		{
			return SubcursorGetSize(null);
		}

		public static sbyte ? CursorGetTinyInt()
		{
			return CursorGetTinyInt(null);
		}

		public static sbyte ? SubcursorGetTinyInt()
		{
			return SubcursorGetTinyInt(null);
		}

		public static byte ? CursorGetUnsignedTinyInt()
		{
			return CursorGetUnsignedTinyInt(null);
		}

		public static byte ? SubcursorGetUnsignedTinyInt()
		{
			return SubcursorGetUnsignedTinyInt(null);
		}

		public static short ? CursorGetSmallInt()
		{
			return CursorGetSmallInt(null);
		}

		public static short ? SubcursorGetSmallInt()
		{
			return SubcursorGetSmallInt(null);
		}

		public static ushort ? CursorGetUnsignedSmallInt()
		{
			return CursorGetUnsignedSmallInt(null);
		}

		public static ushort ? SubcursorGetUnsignedSmallInt()
		{
			return SubcursorGetUnsignedSmallInt(null);
		}

		public static int ? CursorGetInt()
		{
			return CursorGetInt(null);
		}

		public static int ? SubcursorGetInt()
		{
			return SubcursorGetInt(null);
		}

		public static uint ? CursorGetUnsignedInt()
		{
			return CursorGetUnsignedInt(null);
		}

		public static uint ? SubcursorGetUnsignedInt()
		{
			return SubcursorGetUnsignedInt(null);
		}

		public static long ? CursorGetBigInt()
		{
			return CursorGetBigInt(null);
		}

		public static long ? SubcursorGetBigInt()
		{
			return SubcursorGetBigInt(null);
		}

		public static ulong ? CursorGetUnsignedBigInt()
		{
			return CursorGetUnsignedBigInt(null);
		}

		public static ulong ? SubcursorGetUnsignedBigInt()
		{
			return SubcursorGetUnsignedBigInt(null);
		}

		public static float ? CursorGetFloat()
		{
			return CursorGetFloat(null);
		}

		public static float ? SubcursorGetFloat()
		{
			return SubcursorGetFloat(null);
		}

		public static double ? CursorGetDouble()
		{
			return CursorGetDouble(null);
		}

		public static double ? SubcursorGetDouble()
		{
			return SubcursorGetDouble(null);
		}

		public static string CursorGetChar()
		{
			return CursorGetChar(null);
		}

		public static string SubcursorGetChar()
		{
			return SubcursorGetChar(null);
		}

		public static int VariableRegister(object variable)
		{
			Type type;
			int number;
			int i;

			if (variable == null)
			{
				return ErrorNoAddress;
			}
			if (variable.GetType().IsArray == false)   // INFO: only arrays are allowed (otherwise it is not possible to have a "real" reference of the object being registered)
			{
				return ErrorUnexpectedDataType;
			}
			number = -1;
			for(i = 0; i < 8; i++)
			{
				if (variableList[i] == null)
				{
					if (number == -1)
					{
						number = i;
					}
				}
				else
				{
					if (Equals(variable, variableList[i].variable))
					{
						VariableRegister(i, variableList[i].address, No);
						return i;
					}
				}
			}
			if (number == -1)
			{
				return ErrorFull;
			}
			type = variable.GetType().GetElementType();
			if (type != typeof(sbyte) && type != typeof(byte) && type != typeof(short) && type != typeof(ushort) && type != typeof(int) && type != typeof(uint) && type != typeof(long) && type != typeof(ulong) && type != typeof(float) && type != typeof(double))   // INFO: no need to test for build-in types since in C sharp primitive types (e.g. sbyte) are aliases for build-in types (e.g. SByte)
			{
				return ErrorUnexpectedDataType;
			}
			variableList[number] = new Variable(variable);
			VariableRegister(number, variableList[number].address, No);
			return number;
		}

		public static int VariableTransientRegister(object variable)
		{
			Type type;
			int number;
			int i;

			if (variable == null)
			{
				return ErrorNoAddress;
			}
			if (variable.GetType().IsArray == false)   // INFO: only arrays are allowed (otherwise it is not possible to have a "real" reference of the object being registered)
			{
				return ErrorUnexpectedDataType;
			}
			number = -1;
			for(i = 0; i < 8; i++)
			{
				if (variableList[i] == null)
				{
					if (number == -1)
					{
						number = i;
					}
				}
				else
				{
					if (Equals(variable, variableList[i].variable))
					{
						VariableRegister(i, variableList[i].address, Yes);
						return i;
					}
				}
			}
			if (number == -1)
			{
				return ErrorFull;
			}
			type = variable.GetType().GetElementType();
			if (type != typeof(sbyte) && type != typeof(byte) && type != typeof(short) && type != typeof(ushort) && type != typeof(int) && type != typeof(uint) && type != typeof(long) && type != typeof(ulong) && type != typeof(float) && type != typeof(double))   // INFO: no need to test for build-in types since in C sharp primitive types (e.g. sbyte) are aliases for build-in types (e.g. SByte)
			{
				return ErrorUnexpectedDataType;
			}
			variableList[number] = new Variable(variable);
			VariableRegister(number, variableList[number].address, Yes);
			return number;
		}

		public static int VariableUnregister(object variable)
		{
			int i;

			if (variable == null)
			{
				return ErrorNoAddress;
			}
			for(i = 0; i < 8; i++)
			{
				if (variableList[i] != null && Equals(variable, variableList[i].variable))
				{
					VariableUnregister(i);
					variableList[i].handle.Free();
					variableList[i] = null;
					return Success;
				}
			}
			return ErrorNotRegistered;
		}

		public static int VariableUnregisterAll()
		{
			int i;

			for(i = 0; i < 8; i++)
			{
				if (variableList[i] != null)
				{
					VariableUnregister(i);
					variableList[i].handle.Free();
					variableList[i] = null;
				}
			}
			return Success;
		}

		public static int VariableGetNumber(object variable)
		{
			int i;

			if (variable == null)
			{
				return ErrorNoAddress;
			}
			for(i = 0; i < 8; i++)
			{
				if (variableList[i] != null && Equals(variable, variableList[i].variable))
				{
					return i;
				}
			}
			return ErrorNotRegistered;
		}

		public static int VariableGetDataType(object variable)
		{
			int i;

			if (variable == null)
			{
				return ErrorNoAddress;
			}
			for(i = 0; i < 8; i++)
			{
				if (variableList[i] != null && Equals(variable, variableList[i].variable))
				{
					return VariableGetDataType(i);
				}
			}
			return ErrorNotRegistered;
		}

		public static int VariableGetCount(object variable)
		{
			int i;

			if (variable == null)
			{
				return ErrorNoAddress;
			}
			for(i = 0; i < 8; i++)
			{
				if (variableList[i] != null && Equals(variable, variableList[i].variable))
				{
					return VariableGetCount(i);
				}
			}
			return ErrorNotRegistered;
		}

		public static int VariableGetSize(object variable)
		{
			int i;

			if (variable == null)
			{
				return ErrorNoAddress;
			}
			for(i = 0; i < 8; i++)
			{
				if (variableList[i] != null && Equals(variable, variableList[i].variable))
				{
					return VariableGetSize(i);
				}
			}
			return ErrorNotRegistered;
		}

		public static int VariableGetDimensionCount(object variable)
		{
			int i;

			if (variable == null)
			{
				return ErrorNoAddress;
			}
			for(i = 0; i < 8; i++)
			{
				if (variableList[i] != null && Equals(variable, variableList[i].variable))
				{
					return VariableGetDimensionCount(i);
				}
			}
			return ErrorNotRegistered;
		}

		public static int VariableGetDimension(object variable, int index)
		{
			int i;

			if (variable == null)
			{
				return ErrorNoAddress;
			}
			for(i = 0; i < 8; i++)
			{
				if (variableList[i] != null && Equals(variable, variableList[i].variable))
				{
					return VariableGetDimension(i, index);
				}
			}
			return ErrorNotRegistered;
		}
	
  public static int ExecuteGetStatus() {
    int ret = HDFqlPINVOKE.ExecuteGetStatus();
    return ret;
  }

  public static int ErrorGetLine() {
    int ret = HDFqlPINVOKE.ErrorGetLine();
    return ret;
  }

  public static int ErrorGetPosition() {
    int ret = HDFqlPINVOKE.ErrorGetPosition();
    return ret;
  }

  public static string ErrorGetMessage() {
    string ret = HDFqlPINVOKE.ErrorGetMessage();
    return ret;
  }

  public static int MpiGetSize() {
    int ret = HDFqlPINVOKE.MpiGetSize();
    return ret;
  }

  public static int MpiGetRank() {
    int ret = HDFqlPINVOKE.MpiGetRank();
    return ret;
  }

  private static int Execute(string script, int script_size, int programming_language) {
    int ret = HDFqlPINVOKE.Execute(script, script_size, programming_language);
    return ret;
  }

  private static int ExecuteReset() {
    int ret = HDFqlPINVOKE.ExecuteReset();
    return ret;
  }

  private static void VariableRegister(int number, IntPtr address, int transient) {
    HDFqlPINVOKE.VariableRegister(number, address, transient);
  }

  private static void VariableUnregister(int number) {
    HDFqlPINVOKE.VariableUnregister(number);
  }

  private static int VariableGetDataType(int number) {
    int ret = HDFqlPINVOKE.VariableGetDataType(number);
    return ret;
  }

  private static int VariableGetCount(int number) {
    int ret = HDFqlPINVOKE.VariableGetCount(number);
    return ret;
  }

  private static int VariableGetSize(int number) {
    int ret = HDFqlPINVOKE.VariableGetSize(number);
    return ret;
  }

  private static int VariableGetDimensionCount(int number) {
    int ret = HDFqlPINVOKE.VariableGetDimensionCount(number);
    return ret;
  }

  private static int VariableGetDimension(int number, int index) {
    int ret = HDFqlPINVOKE.VariableGetDimension(number, index);
    return ret;
  }

  public static int CursorInitialize(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.CursorInitialize(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int CursorUse(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.CursorUse(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int CursorUseDefault() {
    int ret = HDFqlPINVOKE.CursorUseDefault();
    return ret;
  }

  public static int CursorClear(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.CursorClear(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int CursorClone(HDFqlCursor cursorOriginal, HDFqlCursor cursorClone) {
    int ret = HDFqlPINVOKE.CursorClone(HDFqlCursor.getCPtr(cursorOriginal), HDFqlCursor.getCPtr(cursorClone));
    return ret;
  }

  public static int CursorGetDataType(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.CursorGetDataType(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int CursorGetCount(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.CursorGetCount(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int SubcursorGetCount(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.SubcursorGetCount(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int CursorGetPosition(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.CursorGetPosition(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int SubcursorGetPosition(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.SubcursorGetPosition(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int CursorFirst(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.CursorFirst(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int SubcursorFirst(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.SubcursorFirst(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int CursorLast(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.CursorLast(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int SubcursorLast(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.SubcursorLast(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int CursorNext(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.CursorNext(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int SubcursorNext(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.SubcursorNext(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int CursorPrevious(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.CursorPrevious(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int SubcursorPrevious(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.SubcursorPrevious(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int CursorAbsolute(HDFqlCursor cursor, int position) {
    int ret = HDFqlPINVOKE.CursorAbsolute(HDFqlCursor.getCPtr(cursor), position);
    return ret;
  }

  public static int SubcursorAbsolute(HDFqlCursor cursor, int position) {
    int ret = HDFqlPINVOKE.SubcursorAbsolute(HDFqlCursor.getCPtr(cursor), position);
    return ret;
  }

  public static int CursorRelative(HDFqlCursor cursor, int position) {
    int ret = HDFqlPINVOKE.CursorRelative(HDFqlCursor.getCPtr(cursor), position);
    return ret;
  }

  public static int SubcursorRelative(HDFqlCursor cursor, int position) {
    int ret = HDFqlPINVOKE.SubcursorRelative(HDFqlCursor.getCPtr(cursor), position);
    return ret;
  }

  public static int CursorGetSize(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.CursorGetSize(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static int SubcursorGetSize(HDFqlCursor cursor) {
    int ret = HDFqlPINVOKE.SubcursorGetSize(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static sbyte ? CursorGetTinyInt(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.CursorGetTinyInt(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		char []value = new char[1];
		Marshal.Copy(pointer, value, 0, 1);
		return (sbyte) value[0];
	}

  public static sbyte ? SubcursorGetTinyInt(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.SubcursorGetTinyInt(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		char []value = new char[1];
		Marshal.Copy(pointer, value, 0, 1);
		return (sbyte) value[0];
	}

  public static byte ? CursorGetUnsignedTinyInt(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.CursorGetUnsignedTinyInt(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		char []value = new char[1];
		Marshal.Copy(pointer, value, 0, 1);
		return (byte) value[0];
	}

  public static byte ? SubcursorGetUnsignedTinyInt(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.SubcursorGetUnsignedTinyInt(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		char []value = new char[1];
		Marshal.Copy(pointer, value, 0, 1);
		return (byte) value[0];
	}

  public static short ? CursorGetSmallInt(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.CursorGetSmallInt(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		short []value = new short[1];
		Marshal.Copy(pointer, value, 0, 1);
		return value[0];
	}

  public static short ? SubcursorGetSmallInt(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.SubcursorGetSmallInt(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		short []value = new short[1];
		Marshal.Copy(pointer, value, 0, 1);
		return value[0];
	}

  public static ushort ? CursorGetUnsignedSmallInt(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.CursorGetUnsignedSmallInt(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		short []value = new short[1];
		Marshal.Copy(pointer, value, 0, 1);
		return (ushort) value[0];
	}

  public static ushort ? SubcursorGetUnsignedSmallInt(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.SubcursorGetUnsignedSmallInt(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		short []value = new short[1];
		Marshal.Copy(pointer, value, 0, 1);
		return (ushort) value[0];
	}

  public static int ? CursorGetInt(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.CursorGetInt(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		int []value = new int[1];
		Marshal.Copy(pointer, value, 0, 1);
		return value[0];
	}

  public static int ? SubcursorGetInt(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.SubcursorGetInt(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		int []value = new int[1];
		Marshal.Copy(pointer, value, 0, 1);
		return value[0];
	}

  public static uint ? CursorGetUnsignedInt(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.CursorGetUnsignedInt(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		int []value = new int[1];
		Marshal.Copy(pointer, value, 0, 1);
		return (uint) value[0];
	}

  public static uint ? SubcursorGetUnsignedInt(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.SubcursorGetUnsignedInt(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		int []value = new int[1];
		Marshal.Copy(pointer, value, 0, 1);
		return (uint) value[0];
	}

  public static long ? CursorGetBigInt(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.CursorGetBigInt(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		long []value = new long[1];
		Marshal.Copy(pointer, value, 0, 1);
		return value[0];
	}

  public static long ? SubcursorGetBigInt(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.SubcursorGetBigInt(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		long []value = new long[1];
		Marshal.Copy(pointer, value, 0, 1);
		return value[0];
	}

  public static ulong ? CursorGetUnsignedBigInt(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.CursorGetUnsignedBigInt(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		long []value = new long[1];
		Marshal.Copy(pointer, value, 0, 1);
		return (ulong) value[0];
	}

  public static ulong ? SubcursorGetUnsignedBigInt(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.SubcursorGetUnsignedBigInt(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		long []value = new long[1];
		Marshal.Copy(pointer, value, 0, 1);
		return (ulong) value[0];
	}

  public static float ? CursorGetFloat(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.CursorGetFloat(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		float []value = new float[1];
		Marshal.Copy(pointer, value, 0, 1);
		return value[0];
	}

  public static float ? SubcursorGetFloat(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.SubcursorGetFloat(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		float []value = new float[1];
		Marshal.Copy(pointer, value, 0, 1);
		return value[0];
	}

  public static double ? CursorGetDouble(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.CursorGetDouble(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		double []value = new double[1];
		Marshal.Copy(pointer, value, 0, 1);
		return value[0];
	}

  public static double ? SubcursorGetDouble(HDFqlCursor cursor) {
		IntPtr pointer = HDFqlPINVOKE.SubcursorGetDouble(HDFqlCursor.getCPtr(cursor));

		if (pointer == IntPtr.Zero)
		{
			return null;
		}

		double []value = new double[1];
		Marshal.Copy(pointer, value, 0, 1);
		return value[0];
	}

  public static string CursorGetChar(HDFqlCursor cursor) {
    string ret = HDFqlPINVOKE.CursorGetChar(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static string SubcursorGetChar(HDFqlCursor cursor) {
    string ret = HDFqlPINVOKE.SubcursorGetChar(HDFqlCursor.getCPtr(cursor));
    return ret;
  }

  public static string GetCanonicalPath(string objectName) {
    string ret = HDFqlPINVOKE.GetCanonicalPath(objectName);
    return ret;
  }

  public static readonly string Version = HDFqlPINVOKE.Version_get();
  public static readonly int Yes = HDFqlPINVOKE.Yes_get();
  public static readonly int No = HDFqlPINVOKE.No_get();
  public static readonly int Enabled = HDFqlPINVOKE.Enabled_get();
  public static readonly int Disabled = HDFqlPINVOKE.Disabled_get();
  public static readonly int Unlimited = HDFqlPINVOKE.Unlimited_get();
  public static readonly int Undefined = HDFqlPINVOKE.Undefined_get();
  public static readonly int Global = HDFqlPINVOKE.Global_get();
  public static readonly int Local = HDFqlPINVOKE.Local_get();
  public static readonly int Tracked = HDFqlPINVOKE.Tracked_get();
  public static readonly int Indexed = HDFqlPINVOKE.Indexed_get();
  public static readonly int Contiguous = HDFqlPINVOKE.Contiguous_get();
  public static readonly int Compact = HDFqlPINVOKE.Compact_get();
  public static readonly int Chunked = HDFqlPINVOKE.Chunked_get();
  public static readonly int Early = HDFqlPINVOKE.Early_get();
  public static readonly int Incremental = HDFqlPINVOKE.Incremental_get();
  public static readonly int Late = HDFqlPINVOKE.Late_get();
  public static readonly int Directory = HDFqlPINVOKE.Directory_get();
  public static readonly int File = HDFqlPINVOKE.File_get();
  public static readonly int Group = HDFqlPINVOKE.Group_get();
  public static readonly int Dataset = HDFqlPINVOKE.Dataset_get();
  public static readonly int Attribute = HDFqlPINVOKE.Attribute_get();
  public static readonly int SoftLink = HDFqlPINVOKE.SoftLink_get();
  public static readonly int ExternalLink = HDFqlPINVOKE.ExternalLink_get();
  public static readonly int TinyInt = HDFqlPINVOKE.TinyInt_get();
  public static readonly int UnsignedTinyInt = HDFqlPINVOKE.UnsignedTinyInt_get();
  public static readonly int SmallInt = HDFqlPINVOKE.SmallInt_get();
  public static readonly int UnsignedSmallInt = HDFqlPINVOKE.UnsignedSmallInt_get();
  public static readonly int Int = HDFqlPINVOKE.Int_get();
  public static readonly int UnsignedInt = HDFqlPINVOKE.UnsignedInt_get();
  public static readonly int BigInt = HDFqlPINVOKE.BigInt_get();
  public static readonly int UnsignedBigInt = HDFqlPINVOKE.UnsignedBigInt_get();
  public static readonly int Float = HDFqlPINVOKE.Float_get();
  public static readonly int Double = HDFqlPINVOKE.Double_get();
  public static readonly int Char = HDFqlPINVOKE.Char_get();
  public static readonly int VarTinyInt = HDFqlPINVOKE.VarTinyInt_get();
  public static readonly int UnsignedVarTinyInt = HDFqlPINVOKE.UnsignedVarTinyInt_get();
  public static readonly int VarSmallInt = HDFqlPINVOKE.VarSmallInt_get();
  public static readonly int UnsignedVarSmallInt = HDFqlPINVOKE.UnsignedVarSmallInt_get();
  public static readonly int VarInt = HDFqlPINVOKE.VarInt_get();
  public static readonly int UnsignedVarInt = HDFqlPINVOKE.UnsignedVarInt_get();
  public static readonly int VarBigInt = HDFqlPINVOKE.VarBigInt_get();
  public static readonly int UnsignedVarBigInt = HDFqlPINVOKE.UnsignedVarBigInt_get();
  public static readonly int VarFloat = HDFqlPINVOKE.VarFloat_get();
  public static readonly int VarDouble = HDFqlPINVOKE.VarDouble_get();
  public static readonly int VarChar = HDFqlPINVOKE.VarChar_get();
  public static readonly int Opaque = HDFqlPINVOKE.Opaque_get();
  public static readonly int BitField = HDFqlPINVOKE.BitField_get();
  public static readonly int Enumeration = HDFqlPINVOKE.Enumeration_get();
  public static readonly int Compound = HDFqlPINVOKE.Compound_get();
  public static readonly int Array = HDFqlPINVOKE.Array_get();
  public static readonly int Reference = HDFqlPINVOKE.Reference_get();
  public static readonly int LittleEndian = HDFqlPINVOKE.LittleEndian_get();
  public static readonly int BigEndian = HDFqlPINVOKE.BigEndian_get();
  public static readonly int Ascii = HDFqlPINVOKE.Ascii_get();
  public static readonly int Utf8 = HDFqlPINVOKE.Utf8_get();
  public static readonly int FillDefault = HDFqlPINVOKE.FillDefault_get();
  public static readonly int FillUserDefined = HDFqlPINVOKE.FillUserDefined_get();
  public static readonly int FillUndefined = HDFqlPINVOKE.FillUndefined_get();
  public static readonly int Earliest = HDFqlPINVOKE.Earliest_get();
  public static readonly int Latest = HDFqlPINVOKE.Latest_get();
  public static readonly int Version18 = HDFqlPINVOKE.Version18_get();
  public static readonly int Success = HDFqlPINVOKE.Success_get();
  public static readonly int ErrorParse = HDFqlPINVOKE.ErrorParse_get();
  public static readonly int ErrorNotFound = HDFqlPINVOKE.ErrorNotFound_get();
  public static readonly int ErrorNoAccess = HDFqlPINVOKE.ErrorNoAccess_get();
  public static readonly int ErrorNotOpen = HDFqlPINVOKE.ErrorNotOpen_get();
  public static readonly int ErrorInvalidFile = HDFqlPINVOKE.ErrorInvalidFile_get();
  public static readonly int ErrorNotSupported = HDFqlPINVOKE.ErrorNotSupported_get();
  public static readonly int ErrorNotEnoughSpace = HDFqlPINVOKE.ErrorNotEnoughSpace_get();
  public static readonly int ErrorNotEnoughMemory = HDFqlPINVOKE.ErrorNotEnoughMemory_get();
  public static readonly int ErrorAlreadyExists = HDFqlPINVOKE.ErrorAlreadyExists_get();
  public static readonly int ErrorEmpty = HDFqlPINVOKE.ErrorEmpty_get();
  public static readonly int ErrorFull = HDFqlPINVOKE.ErrorFull_get();
  public static readonly int ErrorBeforeFirst = HDFqlPINVOKE.ErrorBeforeFirst_get();
  public static readonly int ErrorAfterLast = HDFqlPINVOKE.ErrorAfterLast_get();
  public static readonly int ErrorOutsideLimit = HDFqlPINVOKE.ErrorOutsideLimit_get();
  public static readonly int ErrorNoAddress = HDFqlPINVOKE.ErrorNoAddress_get();
  public static readonly int ErrorUnexpectedType = HDFqlPINVOKE.ErrorUnexpectedType_get();
  public static readonly int ErrorUnexpectedDataType = HDFqlPINVOKE.ErrorUnexpectedDataType_get();
  public static readonly int ErrorUnexpectedStorageType = HDFqlPINVOKE.ErrorUnexpectedStorageType_get();
  public static readonly int ErrorDanglingLink = HDFqlPINVOKE.ErrorDanglingLink_get();
  public static readonly int ErrorNotRegistered = HDFqlPINVOKE.ErrorNotRegistered_get();
  public static readonly int ErrorInvalidRegularExpression = HDFqlPINVOKE.ErrorInvalidRegularExpression_get();
  public static readonly int ErrorUnknown = HDFqlPINVOKE.ErrorUnknown_get();
  private static readonly int CSharp = HDFqlPINVOKE.CSharp_get();
}

}
